upstream php_wordpress {
  server {{WORDPRESS_UPSTREAM}}{{^WORDPRESS_UPSTREAM}}wp-fpm{{/WORDPRESS_UPSTREAM}}:9000;
}

########
## Send all http requests to the correct HTTPS location
server {
  listen       80 default_server;
  server_name  "";

  location / {
    return 301 https://{{SERVER_NAME}}{{^SERVER_NAME}}$host{{/SERVER_NAME}}$request_uri;
  }
}

########
## The main Server
server {
  listen 443 ssl http2;
  server_name {{SERVER_NAME}}{{^SERVER_NAME}}localhost{{/SERVER_NAME}};

  ### BEGIN SSL ###
  ssl_certificate           {{SSL_CRT_FILE}};
  ssl_certificate_key       {{SSL_KEY_FILE}};
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;
  ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers               "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!D
  SS:!RC4"; # SSL cipher list: pfs
  ssl_dhparam               /etc/nginx/dhparam/dhparam.pem;
  ssl_ecdh_curve            secp384r1;
  ssl_stapling              on;
  ssl_stapling_verify       on;
  ssl_trusted_certificate   {{SSL_CHAIN_FILE}};
  resolver                  {{RESOLVERS}} valid=300s;
  resolver_timeout          5s;

  add_header                Strict-Transport-Security "max-age=15768000;";
  ### END SSL ###

  # Conditional change docroot if the wordpress theme
  # has supplied files that should be loaded from root.
  # For example: robots.txt
  set $root  /var/www/html/public;
  if (-e /var/www/html/theme$uri) {
    set $root  /var/www/html/theme;
  }
  root $root;

  keepalive_timeout 60;

  index index.php;

  # php max upload limit cannot be larger than this
  client_max_body_size 5m;

  # Redirect error handeling to wordpress
  error_page 403 404 = /index.php$is_args$args;

  # Disallow access to hidden files and directories
  location ~ /\. {
    return 404;
  }

  # Check for static files, otherwise send to wordpress
  location / {
    try_files $uri $uri/ /index.php$is_args$args;
  }

  ### BEGIN SET HEADERS ON MEDIA AND OTHER STATIC FILES ###
  location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ {
    # Media: images, icons, video, audio, HTC
    try_files $uri /index.php$is_args$args;
    expires 1M;
  }

  location ~* \.svgz$ {
    # Media: svgz
    try_files $uri /index.php$is_args$args;
    expires 1M;
    gzip off;
    add_header Content-Encoding gzip;
  }

  location ~* \.(?:flv|avi|mov|ppt|mp3|wmv|wav|m4v|aac|swf|webp)$ {
    # addtional media
    try_files $uri /index.php$is_args$args;
    expires 1M;
  }

  location ~* \.(?:doc|pdf)$ {
    # Documents
    try_files $uri /index.php$is_args$args;
    expires 1d;
  }

  location ~* \.(?:css|js)$ {
    # CSS and Javascript
    try_files $uri /index.php$is_args$args;
    expires 1y;
  }
  ### END SET HEADERS ON MEDIA AND OTHER STATIC FILES ###


  ### BEGIN HANDLE PHP ###

  # Deny access to any files with a .php extension in the uploads directory
  # Works in sub-directory installs and also in multisite network
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
  }

  location ~ ^(?!.+\.php/)(?<script_name>.+\.php)$ {
    limit_except GET HEAD POST { deny all; }

    try_files $script_name =404;

    include fastcgi.conf;

    fastcgi_index index.php;
    fastcgi_pass php_wordpress;
  }

  location ~ ^(?<script_name>.+\.php)(?<path_info>/.*)$ {
    limit_except GET HEAD POST { deny all; }

    try_files $script_name =404;

    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $document_root$script_name;
    fastcgi_param PATH_INFO $path_info;
    #fastcgi_param PATH_TRANSLATED $document_root$path_info;

    fastcgi_index index.php;
    fastcgi_pass php_wordpress;
  }
  ### END HANDLE PHP ###

}
